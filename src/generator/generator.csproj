<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <ImplicitUsings>enable</ImplicitUsings>
        <LangVersion>latest</LangVersion>
        <TargetFramework>netstandard2.0</TargetFramework>
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <AssemblyName>InfiniteEnumFlags</AssemblyName>
        <RootNamespace>InfiniteEnumFlags.Generator</RootNamespace>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.3.1" PrivateAssets="all" />
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>
    
    <!-- Reference the attributes from the generator to compile against them -->
    <!-- Ensure we specify PrivateAssets so the NuGet doesn't have any dependencies -->
    <ItemGroup>
        <ProjectReference Include="..\lib\lib.csproj" PrivateAssets="All" />
    </ItemGroup>
 
    <ItemGroup>
        <!-- Pack the generator dll in the analyzers/dotnet/cs path -->
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />

        <!-- Pack the attributes dll in the analyzers/dotnet/cs path -->
        <None Include="$(OutputPath)\InfiniteEnumFlags.Lib.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />

        <!-- Pack the attributes dll in the lib\netstandard2.0 path -->
        <None Include="$(OutputPath)\InfiniteEnumFlags.Lib.dll" Pack="true" PackagePath="lib\netstandard2.0" Visible="true" />
    </ItemGroup>
</Project>
